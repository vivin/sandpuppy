#!/bin/bash

if [[ $# -lt 2 ]]; then
  echo "$0 <experiment> [<file-regex>]"
fi

EXPERIMENT=$1
FILE_REGEX=$2
if [[ -z "$FILE_REGEX" ]]; then
  FILE_REGEX=".*id:.*";
fi

declare -a targets=()
declare -A target_to_pod_name=()
declare -A target_to_id=()

function format_seconds {
  local formatted=""

  local T=$1
  local D=$((T/60/60/24))
  local H=$((T/60/60%24))
  local M=$((T/60%60))
  local S=$((T%60))
  (( $D > 0 )) && formatted="$D days "
  (( $H > 0 )) && formatted="$formatted$H hours "
  (( $M > 0 )) && formatted="$formatted$M minutes"
  (( $D > 0 || $H > 0 || $M > 0 )) && formatted="$formatted and "
  formatted="$formatted$S seconds"

  echo "$formatted"
}

echo "Finding solutions for rarebug"
echo "Identifying rarebug targets in experiment $EXPERIMENT..."

STATE_DIR="/home/vivin/.script-state/$(basename "$0")"
mkdir -p "$STATE_DIR"

SUBJECT_DIR="/mnt/vivin-nfs/vivin/$EXPERIMENT/rarebug"
id_to_pod_name_and_target_file="$SUBJECT_DIR/results/id_to_pod_name_and_target.yml"
while IFS= read -r -d '' target_script
do
  # shellcheck disable=SC2001
  id=$(echo "$target_script" | sed -e 's,^.*/,,')
  pod_name_and_target=$(grep -A2 "^$id" "$id_to_pod_name_and_target_file" | tail -2)
  pod_name=$(echo "$pod_name_and_target" | head -1 | sed -e 's/^.*pod_name: //')
  target_name=$(echo "$pod_name_and_target" | tail -1 | sed -e 's/^.*target_name: //')

  targets+=("$target_name")
  target_to_pod_name[$target_name]="$pod_name"
  target_to_id[$target_name]="$id"
done < <(find "$SUBJECT_DIR/results/sandpuppy-sync" -maxdepth 1 -mindepth 1 -type d -print0 | sort -z)

echo ""

start_ts=$(cat "$SUBJECT_DIR/results/sandpuppy-sync/start_ts")

for i in "${!targets[@]}"; do
  target=${targets[$i]}
  pod_name=${target_to_pod_name[$target]}
  id=${target_to_id[$target]}

  echo "Checking $target ($id) for solutions..."
  declare -a solutions=()
  INPUTS_DIR="$SUBJECT_DIR/results/sandpuppy-sync/$id/queue";
  j=0
  num_inputs=$(find "$INPUTS_DIR" -maxdepth 1 -type f \( -name "id:*" ! -name "*,sync:*" \) | wc -l)
  while IFS= read -r -d '' input_file_path
  do
    j=$(( j + 1 ))

    # shellcheck disable=SC2001
    filename=$(basename "$input_file_path")
    if [[ -f "$STATE_DIR/$id-$filename" ]]; then
      echo -ne "Skipping input file $j of $num_inputs\r"
      continue
    else
      echo -ne "Checking input file $j of $num_inputs\r";
    fi

    fuzz_start_time=$(stat -c '%Y' "$INPUTS_DIR/id:000000,orig:first.txt")
    mtime=$(stat -c '%Y' "$input_file_path")
    diff=$((mtime - fuzz_start_time))
    pretty_diff=$(format_seconds $diff)

    out=$(env ASAN_OPTIONS="abort_on_error=1:detect_leaks=0:symbolize=1:exitcode=86:allocator_may_return_null=1" timeout 1 "resources/rarebug-asan" < "$input_file_path" 2>&1)

    heap_buffer_overflow=$(echo "$out" | grep "heap-buffer-overflow")
    expected_func_and_line=$(echo "$out" | grep -e "in process_message.*rarebug.c:52:9")
    if [[ -n "$heap_buffer_overflow" ]] && [[ -n "$expected_func_and_line" ]]; then
      solutions+=("$filename (found after $pretty_diff of fuzzing)")
    else
      touch "$STATE_DIR/$id-$filename"
    fi
  done < <(find "$INPUTS_DIR" -maxdepth 1 -type f \( -name "id:*" ! -name "*,sync:*" \) -print0 | sort -z)

  if [[ "${#solutions[@]}" -gt 0 ]]; then
    for solution in "${solutions[@]}"; do
      echo "  $solution"
    done

    echo ""
  fi

done
